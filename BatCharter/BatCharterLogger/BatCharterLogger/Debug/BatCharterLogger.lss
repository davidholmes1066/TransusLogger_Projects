
BatCharterLogger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000020e  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000023d  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000024b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002b58  00000000  00000000  000002c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001c6c  00000000  00000000  00002e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b5  00000000  00000000  00004a87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  00004f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000012aa  00000000  00000000  00004fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003a  00000000  00000000  00006282  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000062bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000018c  0000018c  00000200  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006304  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.init_LED 00000022  0000013c  0000013c  000001b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.init_CLK 00000024  00000118  00000118  0000018c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000026  000000f2  000000f2  00000166  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.init_UART 0000002e  000000c4  000000c4  00000138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.write8_UART 00000018  0000015e  0000015e  000001d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_fini 00000002  00000194  00000194  00000208  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_funcs_on_exit 00000002  00000196  00000196  0000020a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_simulator_exit 00000002  00000198  00000198  0000020c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.exit    00000016  00000176  00000176  000001ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text._Exit   00000004  00000190  00000190  00000204  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
   8:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
   c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  10:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  14:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  18:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  1c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  20:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  24:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  28:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  2c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  30:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  34:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  38:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  3c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  40:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  44:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  48:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  4c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  50:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  54:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  58:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  5c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  60:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  64:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  68:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  6c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  70:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  74:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  78:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  7c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  80:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  84:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  88:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  8c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  90:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  94:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  98:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  9c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  a0:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  a4:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  a8:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	d7 e2       	ldi	r29, 0x27	; 39
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  bc:	0c 94 bb 00 	jmp	0x176	; 0x176 <exit>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>

Disassembly of section .text:

0000018c <__bad_interrupt>:
 18c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.init_LED:

0000013c <init_LED>:
#include <avr/io.h>
#include "init.h"

void init_LED(void)
{
	PORTC.DIRSET |= (0x01);										//Set PC0 MCU LED as outputs
 13c:	e0 e4       	ldi	r30, 0x40	; 64
 13e:	f6 e0       	ldi	r31, 0x06	; 6
 140:	81 81       	ldd	r24, Z+1	; 0x01
 142:	81 60       	ori	r24, 0x01	; 1
 144:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRSET |= (0x80);										//Set PD7 Status LED as output
 146:	a0 e6       	ldi	r26, 0x60	; 96
 148:	b6 e0       	ldi	r27, 0x06	; 6
 14a:	11 96       	adiw	r26, 0x01	; 1
 14c:	8c 91       	ld	r24, X
 14e:	11 97       	sbiw	r26, 0x01	; 1
 150:	80 68       	ori	r24, 0x80	; 128
 152:	11 96       	adiw	r26, 0x01	; 1
 154:	8c 93       	st	X, r24
	
	PORTC.OUTSET |= (0x01);										//Enable MCU LED
 156:	85 81       	ldd	r24, Z+5	; 0x05
 158:	81 60       	ori	r24, 0x01	; 1
 15a:	85 83       	std	Z+5, r24	; 0x05
 15c:	08 95       	ret

Disassembly of section .text.init_CLK:

00000118 <init_CLK>:
	//PORTD.OUTSET |= (0x80);										//Enable Status LED
}
void init_CLK(void)
{
	OSC.CTRL |= OSC_RC32MEN_bm;												// Enable internal 32 MHz oscillator
 118:	e0 e5       	ldi	r30, 0x50	; 80
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	82 60       	ori	r24, 0x02	; 2
 120:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));									// Wait for oscillator is ready
 122:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7fb051>
 126:	81 ff       	sbrs	r24, 1
 128:	fc cf       	rjmp	.-8      	; 0x122 <init_CLK+0xa>
	CCP = CCP_IOREG_gc;														// Security signature to modify clock
 12a:	88 ed       	ldi	r24, 0xD8	; 216
 12c:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;										// Select 32 MHz oscillator
 12e:	e0 e4       	ldi	r30, 0x40	; 64
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 83       	st	Z, r24
	CLK.PSCTRL = CLK_PSADIV_1_gc;											// Set PSA to 1
 136:	11 82       	std	Z+1, r1	; 0x01
	CLK.PSCTRL = CLK_PSBCDIV_1_1_gc;										// Set PSB&PSC to 1
 138:	11 82       	std	Z+1, r1	; 0x01
 13a:	08 95       	ret

Disassembly of section .text.main:

000000f2 <main>:
#include "init.h"
#include "UART.h"

int main(void)
{
	init_CLK();												//Set clock to 32MHz
  f2:	0e 94 8c 00 	call	0x118	; 0x118 <init_CLK>
	init_LED();												//Set status LEDs
  f6:	0e 94 9e 00 	call	0x13c	; 0x13c <init_LED>
	init_UART();											//Set UART registers
  fa:	0e 94 62 00 	call	0xc4	; 0xc4 <__data_load_end>
	
    while(1)
    {
		write8_UART(0x48);									//Send test message
  fe:	88 e4       	ldi	r24, 0x48	; 72
 100:	0e 94 af 00 	call	0x15e	; 0x15e <write8_UART>
		write8_UART(0x49);
 104:	89 e4       	ldi	r24, 0x49	; 73
 106:	0e 94 af 00 	call	0x15e	; 0x15e <write8_UART>
		write8_UART(0x21);
 10a:	81 e2       	ldi	r24, 0x21	; 33
 10c:	0e 94 af 00 	call	0x15e	; 0x15e <write8_UART>
		write8_UART(0x15);
 110:	85 e1       	ldi	r24, 0x15	; 21
 112:	0e 94 af 00 	call	0x15e	; 0x15e <write8_UART>
 116:	f3 cf       	rjmp	.-26     	; 0xfe <main+0xc>

Disassembly of section .text.init_UART:

000000c4 <init_UART>:
	
	data = USARTC0.DATA;												//read 8 data bits
	USARTC0.STATUS |= (0x80);											//Clear DATA ready to read flag
	
	return data;
}
  c4:	84 e0       	ldi	r24, 0x04	; 4
  c6:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x7fb642>
  ca:	88 e0       	ldi	r24, 0x08	; 8
  cc:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7fb641>
  d0:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7fb645>
  d4:	e0 ec       	ldi	r30, 0xC0	; 192
  d6:	f8 e0       	ldi	r31, 0x08	; 8
  d8:	87 81       	ldd	r24, Z+7	; 0x07
  da:	80 6d       	ori	r24, 0xD0	; 208
  dc:	87 83       	std	Z+7, r24	; 0x07
  de:	86 81       	ldd	r24, Z+6	; 0x06
  e0:	83 68       	ori	r24, 0x83	; 131
  e2:	86 83       	std	Z+6, r24	; 0x06
  e4:	84 81       	ldd	r24, Z+4	; 0x04
  e6:	83 60       	ori	r24, 0x03	; 3
  e8:	84 83       	std	Z+4, r24	; 0x04
  ea:	83 81       	ldd	r24, Z+3	; 0x03
  ec:	88 61       	ori	r24, 0x18	; 24
  ee:	83 83       	std	Z+3, r24	; 0x03
  f0:	08 95       	ret

Disassembly of section .text.write8_UART:

0000015e <write8_UART>:

void write8_UART(uint8_t data)
{
	USARTC0.DATA = data;												//Write data to DATA register
 15e:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7fb8c0>
	while(((USARTC0.STATUS)&(0x40))==0)									//Wait for DATA buffer to be written
 162:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <__TEXT_REGION_LENGTH__+0x7fb8c1>
 166:	86 ff       	sbrs	r24, 6
 168:	fc cf       	rjmp	.-8      	; 0x162 <write8_UART+0x4>
	{
		//Do nothing
	}
		
	USARTC0.STATUS |= (0x40);											//Clear DATA written IR flag
 16a:	e0 ec       	ldi	r30, 0xC0	; 192
 16c:	f8 e0       	ldi	r31, 0x08	; 8
 16e:	81 81       	ldd	r24, Z+1	; 0x01
 170:	80 64       	ori	r24, 0x40	; 64
 172:	81 83       	std	Z+1, r24	; 0x01
 174:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000194 <_fini>:
 194:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000196 <__funcs_on_exit>:
 196:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000198 <__simulator_exit>:
 198:	08 95       	ret

Disassembly of section .text.exit:

00000176 <exit>:
 176:	ec 01       	movw	r28, r24
 178:	0e 94 cb 00 	call	0x196	; 0x196 <__funcs_on_exit>
 17c:	0e 94 ca 00 	call	0x194	; 0x194 <_fini>
 180:	ce 01       	movw	r24, r28
 182:	0e 94 cc 00 	call	0x198	; 0x198 <__simulator_exit>
 186:	ce 01       	movw	r24, r28
 188:	0e 94 c8 00 	call	0x190	; 0x190 <_Exit>

Disassembly of section .text._Exit:

00000190 <_Exit>:
 190:	0e 94 60 00 	call	0xc0	; 0xc0 <_exit>
