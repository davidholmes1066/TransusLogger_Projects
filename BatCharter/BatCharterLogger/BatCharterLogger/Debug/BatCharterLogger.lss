
BatCharterLogger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000092e  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000092e  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 000000fc  00000000  00000000  0000095d  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  00000a59  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004637  00000000  00000000  00000b59  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002064  00000000  00000000  00005190  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a37  00000000  00000000  000071f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b8  00000000  00000000  00007c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001320  00000000  00000000  00007de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000048f  00000000  00000000  00009104  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00009593  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000008ac  000008ac  00000920  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00009634  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.init_ADC 0000003e  000006f8  000006f8  0000076c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.read_ADC 00000074  000005f8  000005f8  0000066c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.read_ADCV 000000dc  00000300  00000300  00000374  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.init_DAC 00000012  0000082c  0000082c  000008a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.write_DAC 0000001e  000007de  000007de  00000852  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.manage_BatCurrent 0000015e  000000c4  000000c4  00000138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.init_LED 00000034  00000736  00000736  000007aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.init_CLK 00000024  00000798  00000798  0000080c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.main    0000001a  000007fc  000007fc  00000870  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.init_UART 0000002e  0000076a  0000076a  000007de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text         0000000e  0000083e  0000083e  000008b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text         000000ce  000004b0  000004b0  00000524  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text         0000000a  00000882  00000882  000008f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text         00000008  00000896  00000896  0000090a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text         000000de  00000222  00000222  00000296  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text         0000007a  0000057e  0000057e  000005f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text         00000048  0000066c  0000066c  000006e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text         0000000c  00000876  00000876  000008ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text         00000006  000008a6  000008a6  0000091a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text         0000000e  0000084c  0000084c  000008c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text         0000000e  0000085a  0000085a  000008ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text         00000022  000007bc  000007bc  00000830  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text         00000044  000006b4  000006b4  00000728  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text         0000000e  00000868  00000868  000008dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text         0000000a  0000088c  0000088c  00000900  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text         00000008  0000089e  0000089e  00000912  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text         000000d4  000003dc  000003dc  00000450  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__dummy_fini 00000002  000008b4  000008b4  00000928  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.__dummy_funcs_on_exit 00000002  000008b6  000008b6  0000092a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.__dummy_simulator_exit 00000002  000008b8  000008b8  0000092c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.exit    00000016  00000816  00000816  0000088a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text._Exit   00000004  000008b0  000008b0  00000924  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
   8:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
   c:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  10:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  14:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  18:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  1c:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  20:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  24:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  28:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  2c:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  30:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  34:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  38:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  3c:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  40:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  44:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  48:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  4c:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  50:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  54:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  58:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  5c:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  60:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  64:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  68:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  6c:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  70:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  74:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  78:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  7c:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  80:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  84:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  88:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  8c:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  90:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  94:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  98:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  9c:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  a0:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  a4:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>
  a8:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	d7 e2       	ldi	r29, 0x27	; 39
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	0e 94 fe 03 	call	0x7fc	; 0x7fc <main>
  bc:	0c 94 0b 04 	jmp	0x816	; 0x816 <exit>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>

Disassembly of section .text:

000008ac <__bad_interrupt>:
 8ac:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.init_ADC:

000006f8 <init_ADC>:
#include "ADC.h"


void init_ADC(void)
{
	PORTD_DIRCLR = PIN0_bm;													//Set PD0 as input (Battery 1 Voltage) (ADC PIN 8)
 6f8:	e2 e6       	ldi	r30, 0x62	; 98
 6fa:	f6 e0       	ldi	r31, 0x06	; 6
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	80 83       	st	Z, r24
	PORTD_DIRCLR = PIN1_bm;													//Set PD0 as input (Battery 1 Current) (ADC PIN 9)
 700:	82 e0       	ldi	r24, 0x02	; 2
 702:	80 83       	st	Z, r24
	PORTD_DIRCLR = PIN2_bm;													//Set PD0 as input (Battery 2 Voltage) (ADC PIN 10)
 704:	84 e0       	ldi	r24, 0x04	; 4
 706:	80 83       	st	Z, r24
	PORTD_DIRCLR = PIN3_bm;													//Set PD0 as input (Battery 2 Current) (ADC PIN 11)
 708:	88 e0       	ldi	r24, 0x08	; 8
 70a:	80 83       	st	Z, r24
	
	ADCA.PRESCALER = (0x07);												//Set ADCA clock speed to 125kHz
 70c:	e0 e0       	ldi	r30, 0x00	; 0
 70e:	f2 e0       	ldi	r31, 0x02	; 2
 710:	87 e0       	ldi	r24, 0x07	; 7
 712:	84 83       	std	Z+4, r24	; 0x04
	ADCA.REFCTRL |= ADC_RESOLUTION_12BIT_gc;								//Set ADCA to 12bit resolution
 714:	82 81       	ldd	r24, Z+2	; 0x02
 716:	82 83       	std	Z+2, r24	; 0x02
	ADCA.REFCTRL |= ADC_REFSEL_INTVCC_gc;									//Set ADCA reference voltage to (supply voltage/1.6)
 718:	82 81       	ldd	r24, Z+2	; 0x02
 71a:	80 61       	ori	r24, 0x10	; 16
 71c:	82 83       	std	Z+2, r24	; 0x02
	
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN10_gc;								//Multiplexes PD0 to ADCA channel 8 (Battery 1 Voltage)
 71e:	80 e5       	ldi	r24, 0x50	; 80
 720:	81 a3       	std	Z+33, r24	; 0x21
	
	ADCA.CH0.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;						//Set ADCA channel 0 to single ended input
 722:	80 a1       	ldd	r24, Z+32	; 0x20
 724:	81 60       	ori	r24, 0x01	; 1
 726:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.CH0.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;						//Set ADCA channel 0 lower reference voltage to internal GND
 728:	81 a1       	ldd	r24, Z+33	; 0x21
 72a:	87 60       	ori	r24, 0x07	; 7
 72c:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CTRLA |= (0x01);													//Enable ADCA
 72e:	80 81       	ld	r24, Z
 730:	81 60       	ori	r24, 0x01	; 1
 732:	80 83       	st	Z, r24
 734:	08 95       	ret

Disassembly of section .text.read_ADC:

000005f8 <read_ADC>:

uint16_t read_ADC(uint8_t MeasurementParameter)
{
	uint16_t ADCRes;														//Temporary variable for storing ADC result
	
	switch (MeasurementParameter)
 5f8:	81 30       	cpi	r24, 0x01	; 1
 5fa:	51 f0       	breq	.+20     	; 0x610 <read_ADC+0x18>
 5fc:	28 f0       	brcs	.+10     	; 0x608 <read_ADC+0x10>
 5fe:	82 30       	cpi	r24, 0x02	; 2
 600:	59 f0       	breq	.+22     	; 0x618 <read_ADC+0x20>
 602:	83 30       	cpi	r24, 0x03	; 3
 604:	69 f0       	breq	.+26     	; 0x620 <read_ADC+0x28>
 606:	2f c0       	rjmp	.+94     	; 0x666 <read_ADC+0x6e>
	{
		case 0:
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN8_gc;						//Multiplexes PD0 to ADCA channel 8 (Battery 1 Voltage)
 608:	80 e4       	ldi	r24, 0x40	; 64
 60a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x7fb221>
			break;
 60e:	0b c0       	rjmp	.+22     	; 0x626 <read_ADC+0x2e>
		case 1:
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN9_gc;						//Multiplexes PD1 to ADCA channel 9 (Battery 1 Current)
 610:	88 e4       	ldi	r24, 0x48	; 72
 612:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x7fb221>
			break;
 616:	07 c0       	rjmp	.+14     	; 0x626 <read_ADC+0x2e>
		case 2:
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN10_gc;						//Multiplexes PD2 to ADCA channel 10 (Battery 2 Voltage)
 618:	80 e5       	ldi	r24, 0x50	; 80
 61a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x7fb221>
			break;
 61e:	03 c0       	rjmp	.+6      	; 0x626 <read_ADC+0x2e>
		case 3:
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN11_gc;						//Multiplexes PD3 to ADCA channel 11 (Battery 2 Current)
 620:	88 e5       	ldi	r24, 0x58	; 88
 622:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x7fb221>
		default:
			return 0;
			break;
	}
	
	ADCA.CTRLA |= (0x01);													//Enable ADCA
 626:	e0 e0       	ldi	r30, 0x00	; 0
 628:	f2 e0       	ldi	r31, 0x02	; 2
 62a:	80 81       	ld	r24, Z
 62c:	81 60       	ori	r24, 0x01	; 1
 62e:	80 83       	st	Z, r24
	
	for(int i = 0; i < 1000; i++)
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	01 c0       	rjmp	.+2      	; 0x638 <read_ADC+0x40>
 636:	01 96       	adiw	r24, 0x01	; 1
 638:	88 3e       	cpi	r24, 0xE8	; 232
 63a:	23 e0       	ldi	r18, 0x03	; 3
 63c:	92 07       	cpc	r25, r18
 63e:	dc f3       	brlt	.-10     	; 0x636 <read_ADC+0x3e>
	{
		//Do nothing for long time
	}
	
	ADCA.CTRLA |= (0x04);													//Start a conversion on ADCA
 640:	e0 e0       	ldi	r30, 0x00	; 0
 642:	f2 e0       	ldi	r31, 0x02	; 2
 644:	80 81       	ld	r24, Z
 646:	84 60       	ori	r24, 0x04	; 4
 648:	80 83       	st	Z, r24
	
	while((ADCA.INTFLAGS&(0x01))!=1)										//Wait for ADC conversion
 64a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__TEXT_REGION_LENGTH__+0x7fb206>
 64e:	80 ff       	sbrs	r24, 0
 650:	fc cf       	rjmp	.-8      	; 0x64a <read_ADC+0x52>
	{
		//Do nothing
	}
	
	ADCRes = ADCA.CH0.RES;													//Read ADC conversion
 652:	e0 e0       	ldi	r30, 0x00	; 0
 654:	f2 e0       	ldi	r31, 0x02	; 2
 656:	24 a1       	ldd	r18, Z+36	; 0x24
 658:	35 a1       	ldd	r19, Z+37	; 0x25
	ADCA.INTFLAGS &= (0x01);												//Clear interrupt flag
 65a:	86 81       	ldd	r24, Z+6	; 0x06
 65c:	81 70       	andi	r24, 0x01	; 1
 65e:	86 83       	std	Z+6, r24	; 0x06
	
	return ADCRes;
 660:	82 2f       	mov	r24, r18
 662:	93 2f       	mov	r25, r19
 664:	08 95       	ret
			break;
		case 3:
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN11_gc;						//Multiplexes PD3 to ADCA channel 11 (Battery 2 Current)
			break;
		default:
			return 0;
 666:	80 e0       	ldi	r24, 0x00	; 0
 668:	90 e0       	ldi	r25, 0x00	; 0
	
	ADCRes = ADCA.CH0.RES;													//Read ADC conversion
	ADCA.INTFLAGS &= (0x01);												//Clear interrupt flag
	
	return ADCRes;
}
 66a:	08 95       	ret

Disassembly of section .text.read_ADCV:

00000300 <read_ADCV>:

float read_ADCV(uint8_t MeasurementParameter)
{
 300:	ef 92       	push	r14
 302:	ff 92       	push	r15
 304:	0f 93       	push	r16
 306:	1f 93       	push	r17
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
 310:	c8 57       	subi	r28, 0x78	; 120
 312:	d1 09       	sbc	r29, r1
 314:	cd bf       	out	0x3d, r28	; 61
 316:	de bf       	out	0x3e, r29	; 62
 318:	e8 2e       	mov	r14, r24
	float ADCRes[NAVRAGE];
	float ADCsum = 0;
	
	for(uint8_t i = 0; i < NAVRAGE; i++)
 31a:	f1 2c       	mov	r15, r1
 31c:	31 c0       	rjmp	.+98     	; 0x380 <read_ADCV+0x80>
	{
		ADCRes[i] = (float)read_ADC(MeasurementParameter);					//Get ADC result
 31e:	0f 2d       	mov	r16, r15
 320:	10 e0       	ldi	r17, 0x00	; 0
 322:	8e 2d       	mov	r24, r14
 324:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <read_ADC>
 328:	bc 01       	movw	r22, r24
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 bf 02 	call	0x57e	; 0x57e <__floatunsisf>
 332:	00 0f       	add	r16, r16
 334:	11 1f       	adc	r17, r17
 336:	00 0f       	add	r16, r16
 338:	11 1f       	adc	r17, r17
 33a:	21 e0       	ldi	r18, 0x01	; 1
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	2c 0f       	add	r18, r28
 340:	3d 1f       	adc	r19, r29
 342:	02 0f       	add	r16, r18
 344:	13 1f       	adc	r17, r19
 346:	f8 01       	movw	r30, r16
 348:	60 83       	st	Z, r22
 34a:	71 83       	std	Z+1, r23	; 0x01
 34c:	82 83       	std	Z+2, r24	; 0x02
 34e:	93 83       	std	Z+3, r25	; 0x03
		ADCRes[i] = (((ADCRes[i])-ADCOFFSET)/4095)*INTVCC;					//Convert to volt
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	4a e2       	ldi	r20, 0x2A	; 42
 356:	53 e4       	ldi	r21, 0x43	; 67
 358:	0e 94 1f 04 	call	0x83e	; 0x83e <__subsf3>
 35c:	20 e0       	ldi	r18, 0x00	; 0
 35e:	30 ef       	ldi	r19, 0xF0	; 240
 360:	4f e7       	ldi	r20, 0x7F	; 127
 362:	55 e4       	ldi	r21, 0x45	; 69
 364:	0e 94 4b 04 	call	0x896	; 0x896 <__divsf3>
 368:	27 ec       	ldi	r18, 0xC7	; 199
 36a:	3b e4       	ldi	r19, 0x4B	; 75
 36c:	47 e0       	ldi	r20, 0x07	; 7
 36e:	50 e4       	ldi	r21, 0x40	; 64
 370:	0e 94 4f 04 	call	0x89e	; 0x89e <__mulsf3>
 374:	f8 01       	movw	r30, r16
 376:	60 83       	st	Z, r22
 378:	71 83       	std	Z+1, r23	; 0x01
 37a:	82 83       	std	Z+2, r24	; 0x02
 37c:	93 83       	std	Z+3, r25	; 0x03
float read_ADCV(uint8_t MeasurementParameter)
{
	float ADCRes[NAVRAGE];
	float ADCsum = 0;
	
	for(uint8_t i = 0; i < NAVRAGE; i++)
 37e:	f3 94       	inc	r15
 380:	fd e1       	ldi	r31, 0x1D	; 29
 382:	ff 15       	cp	r31, r15
 384:	60 f6       	brcc	.-104    	; 0x31e <read_ADCV+0x1e>
 386:	10 e0       	ldi	r17, 0x00	; 0
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	70 e0       	ldi	r23, 0x00	; 0
 38c:	cb 01       	movw	r24, r22
 38e:	13 c0       	rjmp	.+38     	; 0x3b6 <read_ADCV+0xb6>
		ADCRes[i] = (((ADCRes[i])-ADCOFFSET)/4095)*INTVCC;					//Convert to volt
	}
	
	for(uint8_t i = 0; i < NAVRAGE; i++)
	{
		ADCsum += ADCRes[i];												//Calculate sum of results
 390:	e1 2f       	mov	r30, r17
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	ee 0f       	add	r30, r30
 396:	ff 1f       	adc	r31, r31
 398:	ee 0f       	add	r30, r30
 39a:	ff 1f       	adc	r31, r31
 39c:	21 e0       	ldi	r18, 0x01	; 1
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	2c 0f       	add	r18, r28
 3a2:	3d 1f       	adc	r19, r29
 3a4:	e2 0f       	add	r30, r18
 3a6:	f3 1f       	adc	r31, r19
 3a8:	20 81       	ld	r18, Z
 3aa:	31 81       	ldd	r19, Z+1	; 0x01
 3ac:	42 81       	ldd	r20, Z+2	; 0x02
 3ae:	53 81       	ldd	r21, Z+3	; 0x03
 3b0:	0e 94 20 04 	call	0x840	; 0x840 <__addsf3>
	{
		ADCRes[i] = (float)read_ADC(MeasurementParameter);					//Get ADC result
		ADCRes[i] = (((ADCRes[i])-ADCOFFSET)/4095)*INTVCC;					//Convert to volt
	}
	
	for(uint8_t i = 0; i < NAVRAGE; i++)
 3b4:	1f 5f       	subi	r17, 0xFF	; 255
 3b6:	1e 31       	cpi	r17, 0x1E	; 30
 3b8:	58 f3       	brcs	.-42     	; 0x390 <read_ADCV+0x90>
	{
		ADCsum += ADCRes[i];												//Calculate sum of results
	}
	
	ADCsum /= NAVRAGE;														//Calculate average of results
 3ba:	20 e0       	ldi	r18, 0x00	; 0
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	40 ef       	ldi	r20, 0xF0	; 240
 3c0:	51 e4       	ldi	r21, 0x41	; 65
 3c2:	0e 94 4b 04 	call	0x896	; 0x896 <__divsf3>
	
	
	return ADCsum;
 3c6:	c8 58       	subi	r28, 0x88	; 136
 3c8:	df 4f       	sbci	r29, 0xFF	; 255
 3ca:	cd bf       	out	0x3d, r28	; 61
 3cc:	de bf       	out	0x3e, r29	; 62
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	1f 91       	pop	r17
 3d4:	0f 91       	pop	r16
 3d6:	ff 90       	pop	r15
 3d8:	ef 90       	pop	r14
 3da:	08 95       	ret

Disassembly of section .text.init_DAC:

0000082c <init_DAC>:
#include "DAC.h"

void init_DAC(void)
{
	DACA.CTRLC = DAC_REFSEL_AVCC_gc;										//set DAC reference to AVCC
 82c:	e0 e0       	ldi	r30, 0x00	; 0
 82e:	f3 e0       	ldi	r31, 0x03	; 3
 830:	88 e0       	ldi	r24, 0x08	; 8
 832:	82 83       	std	Z+2, r24	; 0x02
	DACA.CTRLB = DAC_CHSEL_DUAL_gc;											//set DAC to channel 0
 834:	80 e4       	ldi	r24, 0x40	; 64
 836:	81 83       	std	Z+1, r24	; 0x01
	DACA.CTRLA = DAC_CH0EN_bm | DAC_CH1EN_bm | DAC_ENABLE_bm;				//Enable DAC
 838:	8d e0       	ldi	r24, 0x0D	; 13
 83a:	80 83       	st	Z, r24
 83c:	08 95       	ret

Disassembly of section .text.write_DAC:

000007de <write_DAC>:
	//Write: to register DACA.CH0DATA and DACA.CH1DATA
}

void write_DAC(uint16_t Data, uint8_t channel)
{
	switch (channel)
 7de:	66 23       	and	r22, r22
 7e0:	19 f0       	breq	.+6      	; 0x7e8 <write_DAC+0xa>
 7e2:	61 30       	cpi	r22, 0x01	; 1
 7e4:	31 f0       	breq	.+12     	; 0x7f2 <write_DAC+0x14>
 7e6:	08 95       	ret
	{
	case 0:
		DACA.CH0DATA = Data;												//Write data to channel 0
 7e8:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <__TEXT_REGION_LENGTH__+0x7fb318>
 7ec:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <__TEXT_REGION_LENGTH__+0x7fb319>
		break;
 7f0:	08 95       	ret
	case 1:
		DACA.CH1DATA = Data;												//Write data to channel 1
 7f2:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <__TEXT_REGION_LENGTH__+0x7fb31a>
 7f6:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <__TEXT_REGION_LENGTH__+0x7fb31b>
 7fa:	08 95       	ret

Disassembly of section .text.manage_BatCurrent:

000000c4 <manage_BatCurrent>:
#include "handle.h"

void manage_BatCurrent(void)
{
  c4:	8f 92       	push	r8
  c6:	9f 92       	push	r9
  c8:	af 92       	push	r10
  ca:	bf 92       	push	r11
  cc:	cf 92       	push	r12
  ce:	df 92       	push	r13
  d0:	ef 92       	push	r14
  d2:	ff 92       	push	r15
	uint16_t DACB1;
	uint16_t DACB2;
	
	enum measurment {Battery1V, Battery1I, Battery2V, Battery2I};
		
	Bat1V = (read_ADCV(Battery1V))*10;												//Read battery 1 voltage
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	0e 94 80 01 	call	0x300	; 0x300 <read_ADCV>
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	40 e2       	ldi	r20, 0x20	; 32
  e0:	51 e4       	ldi	r21, 0x41	; 65
  e2:	0e 94 4f 04 	call	0x89e	; 0x89e <__mulsf3>
  e6:	4b 01       	movw	r8, r22
  e8:	5c 01       	movw	r10, r24
	Bat2V = (read_ADCV(Battery2V))*10;												//Read battery 2 voltage
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	0e 94 80 01 	call	0x300	; 0x300 <read_ADCV>
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	40 e2       	ldi	r20, 0x20	; 32
  f6:	51 e4       	ldi	r21, 0x41	; 65
  f8:	0e 94 4f 04 	call	0x89e	; 0x89e <__mulsf3>
  fc:	6b 01       	movw	r12, r22
  fe:	7c 01       	movw	r14, r24
	
	if(Bat1V>1)																		//Bat 1 control loop
 100:	20 e0       	ldi	r18, 0x00	; 0
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	40 e8       	ldi	r20, 0x80	; 128
 106:	5f e3       	ldi	r21, 0x3F	; 63
 108:	c5 01       	movw	r24, r10
 10a:	b4 01       	movw	r22, r8
 10c:	0e 94 46 04 	call	0x88c	; 0x88c <__gesf2>
 110:	18 16       	cp	r1, r24
 112:	94 f5       	brge	.+100    	; 0x178 <manage_BatCurrent+0xb4>
	{
		PORTA.OUTSET = PIN7_bm;														//Enable status LED
 114:	80 e8       	ldi	r24, 0x80	; 128
 116:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7fb605>
		Bat1I = (read_ADCV(Battery1I)/Rs);											//Calculate current
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 80 01 	call	0x300	; 0x300 <read_ADCV>
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	4c e4       	ldi	r20, 0x4C	; 76
 126:	52 e4       	ldi	r21, 0x42	; 66
 128:	0e 94 4b 04 	call	0x896	; 0x896 <__divsf3>
 12c:	4b 01       	movw	r8, r22
 12e:	5c 01       	movw	r10, r24
		if (Bat1I < Is)
 130:	26 e9       	ldi	r18, 0x96	; 150
 132:	33 e4       	ldi	r19, 0x43	; 67
 134:	4b e8       	ldi	r20, 0x8B	; 139
 136:	5c e3       	ldi	r21, 0x3C	; 60
 138:	0e 94 41 04 	call	0x882	; 0x882 <__cmpsf2>
 13c:	88 23       	and	r24, r24
 13e:	4c f4       	brge	.+18     	; 0x152 <manage_BatCurrent+0x8e>
		{
			DACB1 = DACA.CH0DATA;													//Get DAC DATA					
 140:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <__TEXT_REGION_LENGTH__+0x7fb318>
 144:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <__TEXT_REGION_LENGTH__+0x7fb319>
			DACB1++;
			write_DAC(DACB1, 0);													//Write new DATA to DAC
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	0e 94 ef 03 	call	0x7de	; 0x7de <write_DAC>
 150:	1b c0       	rjmp	.+54     	; 0x188 <manage_BatCurrent+0xc4>
		}
		else if (Bat1I > Is)
 152:	26 e9       	ldi	r18, 0x96	; 150
 154:	33 e4       	ldi	r19, 0x43	; 67
 156:	4b e8       	ldi	r20, 0x8B	; 139
 158:	5c e3       	ldi	r21, 0x3C	; 60
 15a:	c5 01       	movw	r24, r10
 15c:	b4 01       	movw	r22, r8
 15e:	0e 94 46 04 	call	0x88c	; 0x88c <__gesf2>
 162:	18 16       	cp	r1, r24
 164:	8c f4       	brge	.+34     	; 0x188 <manage_BatCurrent+0xc4>
		{
			DACB1 = DACA.CH0DATA;													//Get DAC DATA
 166:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <__TEXT_REGION_LENGTH__+0x7fb318>
 16a:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <__TEXT_REGION_LENGTH__+0x7fb319>
			DACB1--;
			write_DAC(DACB1, 0);													//Write new DATA to DAC
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	0e 94 ef 03 	call	0x7de	; 0x7de <write_DAC>
 176:	08 c0       	rjmp	.+16     	; 0x188 <manage_BatCurrent+0xc4>
		}
	}
	else
	{
		PORTA.OUTCLR = PIN7_bm;														//B1 Not connected stop measuring
 178:	80 e8       	ldi	r24, 0x80	; 128
 17a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7fb606>
		write_DAC(0, 0);
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 ef 03 	call	0x7de	; 0x7de <write_DAC>
	}
	
	
	
	if(Bat2V>1)																		//Bat 2 control loop
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	40 e8       	ldi	r20, 0x80	; 128
 18e:	5f e3       	ldi	r21, 0x3F	; 63
 190:	c7 01       	movw	r24, r14
 192:	b6 01       	movw	r22, r12
 194:	0e 94 46 04 	call	0x88c	; 0x88c <__gesf2>
 198:	18 16       	cp	r1, r24
 19a:	94 f5       	brge	.+100    	; 0x200 <__EEPROM_REGION_LENGTH__>
	{
		PORTA.OUTSET = PIN6_bm;														//Enable status LED
 19c:	80 e4       	ldi	r24, 0x40	; 64
 19e:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7fb605>
		Bat2I = (read_ADCV(Battery2I)/Rs);											//Calculate current
 1a2:	83 e0       	ldi	r24, 0x03	; 3
 1a4:	0e 94 80 01 	call	0x300	; 0x300 <read_ADCV>
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	4c e4       	ldi	r20, 0x4C	; 76
 1ae:	52 e4       	ldi	r21, 0x42	; 66
 1b0:	0e 94 4b 04 	call	0x896	; 0x896 <__divsf3>
 1b4:	6b 01       	movw	r12, r22
 1b6:	7c 01       	movw	r14, r24
		if (Bat2I < Is)
 1b8:	26 e9       	ldi	r18, 0x96	; 150
 1ba:	33 e4       	ldi	r19, 0x43	; 67
 1bc:	4b e8       	ldi	r20, 0x8B	; 139
 1be:	5c e3       	ldi	r21, 0x3C	; 60
 1c0:	0e 94 41 04 	call	0x882	; 0x882 <__cmpsf2>
 1c4:	88 23       	and	r24, r24
 1c6:	4c f4       	brge	.+18     	; 0x1da <manage_BatCurrent+0x116>
		{
			DACB2 = DACA.CH1DATA;													//Get DAC DATA
 1c8:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <__TEXT_REGION_LENGTH__+0x7fb31a>
 1cc:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <__TEXT_REGION_LENGTH__+0x7fb31b>
			DACB2++;
			write_DAC(DACB2, 1);													//Write new DATA to DAC
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	0e 94 ef 03 	call	0x7de	; 0x7de <write_DAC>
 1d8:	1b c0       	rjmp	.+54     	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
		}
		else if (Bat2I > Is)
 1da:	26 e9       	ldi	r18, 0x96	; 150
 1dc:	33 e4       	ldi	r19, 0x43	; 67
 1de:	4b e8       	ldi	r20, 0x8B	; 139
 1e0:	5c e3       	ldi	r21, 0x3C	; 60
 1e2:	c7 01       	movw	r24, r14
 1e4:	b6 01       	movw	r22, r12
 1e6:	0e 94 46 04 	call	0x88c	; 0x88c <__gesf2>
 1ea:	18 16       	cp	r1, r24
 1ec:	8c f4       	brge	.+34     	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
		{
			DACB2 = DACA.CH1DATA;													//Get DAC DATA
 1ee:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <__TEXT_REGION_LENGTH__+0x7fb31a>
 1f2:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <__TEXT_REGION_LENGTH__+0x7fb31b>
			DACB2--;
			write_DAC(DACB2, 1);													//Write new DATA to DAC
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	0e 94 ef 03 	call	0x7de	; 0x7de <write_DAC>
 1fe:	08 c0       	rjmp	.+16     	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
		}
	}
	else
	{
		PORTA.OUTCLR = PIN6_bm;														//B2 Not connected stop measuring
 200:	80 e4       	ldi	r24, 0x40	; 64
 202:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7fb606>
		write_DAC(0, 1);
 206:	61 e0       	ldi	r22, 0x01	; 1
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 ef 03 	call	0x7de	; 0x7de <write_DAC>
	}

 210:	ff 90       	pop	r15
 212:	ef 90       	pop	r14
 214:	df 90       	pop	r13
 216:	cf 90       	pop	r12
 218:	bf 90       	pop	r11
 21a:	af 90       	pop	r10
 21c:	9f 90       	pop	r9
 21e:	8f 90       	pop	r8
 220:	08 95       	ret

Disassembly of section .text.init_LED:

00000736 <init_LED>:
#include <avr/io.h>
#include "init.h"

void init_LED(void)
{
	PORTC.DIRSET |= (0x01);													//Set PC0 MCU LED as outputs
 736:	e0 e4       	ldi	r30, 0x40	; 64
 738:	f6 e0       	ldi	r31, 0x06	; 6
 73a:	81 81       	ldd	r24, Z+1	; 0x01
 73c:	81 60       	ori	r24, 0x01	; 1
 73e:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRSET |= (0x80);													//Set PD7 Status LED as output
 740:	a0 e6       	ldi	r26, 0x60	; 96
 742:	b6 e0       	ldi	r27, 0x06	; 6
 744:	11 96       	adiw	r26, 0x01	; 1
 746:	8c 91       	ld	r24, X
 748:	11 97       	sbiw	r26, 0x01	; 1
 74a:	80 68       	ori	r24, 0x80	; 128
 74c:	11 96       	adiw	r26, 0x01	; 1
 74e:	8c 93       	st	X, r24
	PORTA.DIRSET = PIN7_bm;													//Set PA7 as Bat1 measurement status light
 750:	a0 e0       	ldi	r26, 0x00	; 0
 752:	b6 e0       	ldi	r27, 0x06	; 6
 754:	80 e8       	ldi	r24, 0x80	; 128
 756:	11 96       	adiw	r26, 0x01	; 1
 758:	8c 93       	st	X, r24
 75a:	11 97       	sbiw	r26, 0x01	; 1
	PORTA.DIRSET = PIN6_bm;													//Set PA6 as Bat2 measurement status light
 75c:	80 e4       	ldi	r24, 0x40	; 64
 75e:	11 96       	adiw	r26, 0x01	; 1
 760:	8c 93       	st	X, r24
	
	PORTC.OUTSET |= (0x01);													//Enable MCU LED
 762:	85 81       	ldd	r24, Z+5	; 0x05
 764:	81 60       	ori	r24, 0x01	; 1
 766:	85 83       	std	Z+5, r24	; 0x05
 768:	08 95       	ret

Disassembly of section .text.init_CLK:

00000798 <init_CLK>:
	//PORTD.OUTSET |= (0x80);												//Enable Status LED
}

void init_CLK(void)
{
	OSC.CTRL |= OSC_RC32MEN_bm;												// Enable internal 32 MHz oscillator
 798:	e0 e5       	ldi	r30, 0x50	; 80
 79a:	f0 e0       	ldi	r31, 0x00	; 0
 79c:	80 81       	ld	r24, Z
 79e:	82 60       	ori	r24, 0x02	; 2
 7a0:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));									// Wait for oscillator is ready
 7a2:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7fb051>
 7a6:	81 ff       	sbrs	r24, 1
 7a8:	fc cf       	rjmp	.-8      	; 0x7a2 <init_CLK+0xa>
	CCP = CCP_IOREG_gc;														// Security signature to modify clock
 7aa:	88 ed       	ldi	r24, 0xD8	; 216
 7ac:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;										// Select 32 MHz oscillator
 7ae:	e0 e4       	ldi	r30, 0x40	; 64
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	80 83       	st	Z, r24
	CLK.PSCTRL = CLK_PSADIV_1_gc;											// Set PSA to 1
 7b6:	11 82       	std	Z+1, r1	; 0x01
	CLK.PSCTRL = CLK_PSBCDIV_1_1_gc;										// Set PSB&PSC to 1
 7b8:	11 82       	std	Z+1, r1	; 0x01
 7ba:	08 95       	ret

Disassembly of section .text.main:

000007fc <main>:
#include "DAC.h"
#include "handle.h"

int main(void)
{
	init_CLK();																		//Set clock to 32MHz
 7fc:	0e 94 cc 03 	call	0x798	; 0x798 <init_CLK>
	init_LED();																		//Set status LEDs
 800:	0e 94 9b 03 	call	0x736	; 0x736 <init_LED>
	init_UART();																	//Set UART registers
 804:	0e 94 b5 03 	call	0x76a	; 0x76a <init_UART>
	init_ADC();																		//Set ADC registers
 808:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <init_ADC>
	init_DAC();																		//Set DAC parameters
 80c:	0e 94 16 04 	call	0x82c	; 0x82c <init_DAC>
	float Bat2I;
	uint16_t DACB2;
	
    while(1)
    {
		manage_BatCurrent();
 810:	0e 94 62 00 	call	0xc4	; 0xc4 <__data_load_end>
 814:	fd cf       	rjmp	.-6      	; 0x810 <__DATA_REGION_LENGTH__+0x10>

Disassembly of section .text.init_UART:

0000076a <init_UART>:
#include "UART.h"

void init_UART(void)
{
	PORTC_DIRCLR = PIN2_bm;												//Set RX pin USARTC0 C2 as input
 76a:	84 e0       	ldi	r24, 0x04	; 4
 76c:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x7fb642>
	PORTC_DIRSET = PIN3_bm;												//Set TX pin USARTC0 C3 as output
 770:	88 e0       	ldi	r24, 0x08	; 8
 772:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7fb641>
	PORTC_OUTSET = PIN3_bm;												//Set TX pin to high
 776:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7fb645>
	
	USARTC0.BAUDCTRLB |= (0x0D<<4);										//Set BSCALE to -3 for baud 115200
 77a:	e0 ec       	ldi	r30, 0xC0	; 192
 77c:	f8 e0       	ldi	r31, 0x08	; 8
 77e:	87 81       	ldd	r24, Z+7	; 0x07
 780:	80 6d       	ori	r24, 0xD0	; 208
 782:	87 83       	std	Z+7, r24	; 0x07
	USARTC0.BAUDCTRLA |= (0x83);										//Set BSEL to 131 for baud 115200
 784:	86 81       	ldd	r24, Z+6	; 0x06
 786:	83 68       	ori	r24, 0x83	; 131
 788:	86 83       	std	Z+6, r24	; 0x06

	USARTC0.CTRLC |= (0x03);											//Sets amount of data bits to 8
 78a:	84 81       	ldd	r24, Z+4	; 0x04
 78c:	83 60       	ori	r24, 0x03	; 3
 78e:	84 83       	std	Z+4, r24	; 0x04
	USARTC0.CTRLB |= (0x03<<3);											//Sets the Rx and TX enable bits
 790:	83 81       	ldd	r24, Z+3	; 0x03
 792:	88 61       	ori	r24, 0x18	; 24
 794:	83 83       	std	Z+3, r24	; 0x03
 796:	08 95       	ret

Disassembly of section .text:

0000083e <__subsf3>:
 83e:	50 58       	subi	r21, 0x80	; 128

00000840 <__addsf3>:
 840:	bb 27       	eor	r27, r27
 842:	aa 27       	eor	r26, r26
 844:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__addsf3x>
 848:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__fp_round>

Disassembly of section .text:

000004b0 <__addsf3x>:
 4b0:	11 c0       	rjmp	.+34     	; 0x4d4 <__addsf3x+0x24>
 4b2:	0e 94 26 04 	call	0x84c	; 0x84c <__fp_pscA>
 4b6:	38 f0       	brcs	.+14     	; 0x4c6 <__addsf3x+0x16>
 4b8:	0e 94 2d 04 	call	0x85a	; 0x85a <__fp_pscB>
 4bc:	20 f0       	brcs	.+8      	; 0x4c6 <__addsf3x+0x16>
 4be:	39 f4       	brne	.+14     	; 0x4ce <__addsf3x+0x1e>
 4c0:	9f 3f       	cpi	r25, 0xFF	; 255
 4c2:	19 f4       	brne	.+6      	; 0x4ca <__addsf3x+0x1a>
 4c4:	26 f4       	brtc	.+8      	; 0x4ce <__addsf3x+0x1e>
 4c6:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__fp_nan>
 4ca:	0e f4       	brtc	.+2      	; 0x4ce <__addsf3x+0x1e>
 4cc:	e0 95       	com	r30
 4ce:	e7 fb       	bst	r30, 7
 4d0:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_inf>
 4d4:	e9 2f       	mov	r30, r25
 4d6:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__fp_split3>
 4da:	58 f3       	brcs	.-42     	; 0x4b2 <__addsf3x+0x2>
 4dc:	ba 17       	cp	r27, r26
 4de:	62 07       	cpc	r22, r18
 4e0:	73 07       	cpc	r23, r19
 4e2:	84 07       	cpc	r24, r20
 4e4:	95 07       	cpc	r25, r21
 4e6:	20 f0       	brcs	.+8      	; 0x4f0 <__addsf3x+0x40>
 4e8:	79 f4       	brne	.+30     	; 0x508 <__addsf3x+0x58>
 4ea:	a6 f5       	brtc	.+104    	; 0x554 <__addsf3x+0xa4>
 4ec:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_zero>
 4f0:	0e f4       	brtc	.+2      	; 0x4f4 <__addsf3x+0x44>
 4f2:	e0 95       	com	r30
 4f4:	0b 2e       	mov	r0, r27
 4f6:	ba 2f       	mov	r27, r26
 4f8:	a0 2d       	mov	r26, r0
 4fa:	0b 01       	movw	r0, r22
 4fc:	b9 01       	movw	r22, r18
 4fe:	90 01       	movw	r18, r0
 500:	0c 01       	movw	r0, r24
 502:	ca 01       	movw	r24, r20
 504:	a0 01       	movw	r20, r0
 506:	11 24       	eor	r1, r1
 508:	ff 27       	eor	r31, r31
 50a:	59 1b       	sub	r21, r25
 50c:	99 f0       	breq	.+38     	; 0x534 <__addsf3x+0x84>
 50e:	59 3f       	cpi	r21, 0xF9	; 249
 510:	50 f4       	brcc	.+20     	; 0x526 <__addsf3x+0x76>
 512:	50 3e       	cpi	r21, 0xE0	; 224
 514:	68 f1       	brcs	.+90     	; 0x570 <__addsf3x+0xc0>
 516:	1a 16       	cp	r1, r26
 518:	f0 40       	sbci	r31, 0x00	; 0
 51a:	a2 2f       	mov	r26, r18
 51c:	23 2f       	mov	r18, r19
 51e:	34 2f       	mov	r19, r20
 520:	44 27       	eor	r20, r20
 522:	58 5f       	subi	r21, 0xF8	; 248
 524:	f3 cf       	rjmp	.-26     	; 0x50c <__addsf3x+0x5c>
 526:	46 95       	lsr	r20
 528:	37 95       	ror	r19
 52a:	27 95       	ror	r18
 52c:	a7 95       	ror	r26
 52e:	f0 40       	sbci	r31, 0x00	; 0
 530:	53 95       	inc	r21
 532:	c9 f7       	brne	.-14     	; 0x526 <__addsf3x+0x76>
 534:	7e f4       	brtc	.+30     	; 0x554 <__addsf3x+0xa4>
 536:	1f 16       	cp	r1, r31
 538:	ba 0b       	sbc	r27, r26
 53a:	62 0b       	sbc	r22, r18
 53c:	73 0b       	sbc	r23, r19
 53e:	84 0b       	sbc	r24, r20
 540:	ba f0       	brmi	.+46     	; 0x570 <__addsf3x+0xc0>
 542:	91 50       	subi	r25, 0x01	; 1
 544:	a1 f0       	breq	.+40     	; 0x56e <__addsf3x+0xbe>
 546:	ff 0f       	add	r31, r31
 548:	bb 1f       	adc	r27, r27
 54a:	66 1f       	adc	r22, r22
 54c:	77 1f       	adc	r23, r23
 54e:	88 1f       	adc	r24, r24
 550:	c2 f7       	brpl	.-16     	; 0x542 <__addsf3x+0x92>
 552:	0e c0       	rjmp	.+28     	; 0x570 <__addsf3x+0xc0>
 554:	ba 0f       	add	r27, r26
 556:	62 1f       	adc	r22, r18
 558:	73 1f       	adc	r23, r19
 55a:	84 1f       	adc	r24, r20
 55c:	48 f4       	brcc	.+18     	; 0x570 <__addsf3x+0xc0>
 55e:	87 95       	ror	r24
 560:	77 95       	ror	r23
 562:	67 95       	ror	r22
 564:	b7 95       	ror	r27
 566:	f7 95       	ror	r31
 568:	9e 3f       	cpi	r25, 0xFE	; 254
 56a:	08 f0       	brcs	.+2      	; 0x56e <__addsf3x+0xbe>
 56c:	b0 cf       	rjmp	.-160    	; 0x4ce <__addsf3x+0x1e>
 56e:	93 95       	inc	r25
 570:	88 0f       	add	r24, r24
 572:	08 f0       	brcs	.+2      	; 0x576 <__addsf3x+0xc6>
 574:	99 27       	eor	r25, r25
 576:	ee 0f       	add	r30, r30
 578:	97 95       	ror	r25
 57a:	87 95       	ror	r24
 57c:	08 95       	ret

Disassembly of section .text:

00000882 <__cmpsf2>:
 882:	0e 94 36 03 	call	0x66c	; 0x66c <__fp_cmp>
 886:	08 f4       	brcc	.+2      	; 0x88a <__cmpsf2+0x8>
 888:	81 e0       	ldi	r24, 0x01	; 1
 88a:	08 95       	ret

Disassembly of section .text:

00000896 <__divsf3>:
 896:	0e 94 11 01 	call	0x222	; 0x222 <__divsf3x>
 89a:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__fp_round>

Disassembly of section .text:

00000222 <__divsf3x>:
 222:	10 c0       	rjmp	.+32     	; 0x244 <__divsf3x+0x22>
 224:	0e 94 2d 04 	call	0x85a	; 0x85a <__fp_pscB>
 228:	58 f0       	brcs	.+22     	; 0x240 <__divsf3x+0x1e>
 22a:	0e 94 26 04 	call	0x84c	; 0x84c <__fp_pscA>
 22e:	40 f0       	brcs	.+16     	; 0x240 <__divsf3x+0x1e>
 230:	29 f4       	brne	.+10     	; 0x23c <__divsf3x+0x1a>
 232:	5f 3f       	cpi	r21, 0xFF	; 255
 234:	29 f0       	breq	.+10     	; 0x240 <__divsf3x+0x1e>
 236:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_inf>
 23a:	51 11       	cpse	r21, r1
 23c:	0c 94 35 04 	jmp	0x86a	; 0x86a <__fp_szero>
 240:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__fp_nan>
 244:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__fp_split3>
 248:	68 f3       	brcs	.-38     	; 0x224 <__divsf3x+0x2>

0000024a <__divsf3_pse>:
 24a:	99 23       	and	r25, r25
 24c:	b1 f3       	breq	.-20     	; 0x23a <__divsf3x+0x18>
 24e:	55 23       	and	r21, r21
 250:	91 f3       	breq	.-28     	; 0x236 <__divsf3x+0x14>
 252:	95 1b       	sub	r25, r21
 254:	55 0b       	sbc	r21, r21
 256:	bb 27       	eor	r27, r27
 258:	aa 27       	eor	r26, r26
 25a:	62 17       	cp	r22, r18
 25c:	73 07       	cpc	r23, r19
 25e:	84 07       	cpc	r24, r20
 260:	38 f0       	brcs	.+14     	; 0x270 <__divsf3_pse+0x26>
 262:	9f 5f       	subi	r25, 0xFF	; 255
 264:	5f 4f       	sbci	r21, 0xFF	; 255
 266:	22 0f       	add	r18, r18
 268:	33 1f       	adc	r19, r19
 26a:	44 1f       	adc	r20, r20
 26c:	aa 1f       	adc	r26, r26
 26e:	a9 f3       	breq	.-22     	; 0x25a <__divsf3_pse+0x10>
 270:	35 d0       	rcall	.+106    	; 0x2dc <__divsf3_pse+0x92>
 272:	0e 2e       	mov	r0, r30
 274:	3a f0       	brmi	.+14     	; 0x284 <__divsf3_pse+0x3a>
 276:	e0 e8       	ldi	r30, 0x80	; 128
 278:	32 d0       	rcall	.+100    	; 0x2de <__divsf3_pse+0x94>
 27a:	91 50       	subi	r25, 0x01	; 1
 27c:	50 40       	sbci	r21, 0x00	; 0
 27e:	e6 95       	lsr	r30
 280:	00 1c       	adc	r0, r0
 282:	ca f7       	brpl	.-14     	; 0x276 <__divsf3_pse+0x2c>
 284:	2b d0       	rcall	.+86     	; 0x2dc <__divsf3_pse+0x92>
 286:	fe 2f       	mov	r31, r30
 288:	29 d0       	rcall	.+82     	; 0x2dc <__divsf3_pse+0x92>
 28a:	66 0f       	add	r22, r22
 28c:	77 1f       	adc	r23, r23
 28e:	88 1f       	adc	r24, r24
 290:	bb 1f       	adc	r27, r27
 292:	26 17       	cp	r18, r22
 294:	37 07       	cpc	r19, r23
 296:	48 07       	cpc	r20, r24
 298:	ab 07       	cpc	r26, r27
 29a:	b0 e8       	ldi	r27, 0x80	; 128
 29c:	09 f0       	breq	.+2      	; 0x2a0 <__divsf3_pse+0x56>
 29e:	bb 0b       	sbc	r27, r27
 2a0:	80 2d       	mov	r24, r0
 2a2:	bf 01       	movw	r22, r30
 2a4:	ff 27       	eor	r31, r31
 2a6:	93 58       	subi	r25, 0x83	; 131
 2a8:	5f 4f       	sbci	r21, 0xFF	; 255
 2aa:	3a f0       	brmi	.+14     	; 0x2ba <__divsf3_pse+0x70>
 2ac:	9e 3f       	cpi	r25, 0xFE	; 254
 2ae:	51 05       	cpc	r21, r1
 2b0:	78 f0       	brcs	.+30     	; 0x2d0 <__divsf3_pse+0x86>
 2b2:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_inf>
 2b6:	0c 94 35 04 	jmp	0x86a	; 0x86a <__fp_szero>
 2ba:	5f 3f       	cpi	r21, 0xFF	; 255
 2bc:	e4 f3       	brlt	.-8      	; 0x2b6 <__divsf3_pse+0x6c>
 2be:	98 3e       	cpi	r25, 0xE8	; 232
 2c0:	d4 f3       	brlt	.-12     	; 0x2b6 <__divsf3_pse+0x6c>
 2c2:	86 95       	lsr	r24
 2c4:	77 95       	ror	r23
 2c6:	67 95       	ror	r22
 2c8:	b7 95       	ror	r27
 2ca:	f7 95       	ror	r31
 2cc:	9f 5f       	subi	r25, 0xFF	; 255
 2ce:	c9 f7       	brne	.-14     	; 0x2c2 <__divsf3_pse+0x78>
 2d0:	88 0f       	add	r24, r24
 2d2:	91 1d       	adc	r25, r1
 2d4:	96 95       	lsr	r25
 2d6:	87 95       	ror	r24
 2d8:	97 f9       	bld	r25, 7
 2da:	08 95       	ret
 2dc:	e1 e0       	ldi	r30, 0x01	; 1
 2de:	66 0f       	add	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	88 1f       	adc	r24, r24
 2e4:	bb 1f       	adc	r27, r27
 2e6:	62 17       	cp	r22, r18
 2e8:	73 07       	cpc	r23, r19
 2ea:	84 07       	cpc	r24, r20
 2ec:	ba 07       	cpc	r27, r26
 2ee:	20 f0       	brcs	.+8      	; 0x2f8 <__divsf3_pse+0xae>
 2f0:	62 1b       	sub	r22, r18
 2f2:	73 0b       	sbc	r23, r19
 2f4:	84 0b       	sbc	r24, r20
 2f6:	ba 0b       	sbc	r27, r26
 2f8:	ee 1f       	adc	r30, r30
 2fa:	88 f7       	brcc	.-30     	; 0x2de <__divsf3_pse+0x94>
 2fc:	e0 95       	com	r30
 2fe:	08 95       	ret

Disassembly of section .text:

0000057e <__floatunsisf>:
 57e:	e8 94       	clt
 580:	09 c0       	rjmp	.+18     	; 0x594 <__floatsisf+0x12>

00000582 <__floatsisf>:
 582:	97 fb       	bst	r25, 7
 584:	3e f4       	brtc	.+14     	; 0x594 <__floatsisf+0x12>
 586:	90 95       	com	r25
 588:	80 95       	com	r24
 58a:	70 95       	com	r23
 58c:	61 95       	neg	r22
 58e:	7f 4f       	sbci	r23, 0xFF	; 255
 590:	8f 4f       	sbci	r24, 0xFF	; 255
 592:	9f 4f       	sbci	r25, 0xFF	; 255
 594:	99 23       	and	r25, r25
 596:	a9 f0       	breq	.+42     	; 0x5c2 <__floatsisf+0x40>
 598:	f9 2f       	mov	r31, r25
 59a:	96 e9       	ldi	r25, 0x96	; 150
 59c:	bb 27       	eor	r27, r27
 59e:	93 95       	inc	r25
 5a0:	f6 95       	lsr	r31
 5a2:	87 95       	ror	r24
 5a4:	77 95       	ror	r23
 5a6:	67 95       	ror	r22
 5a8:	b7 95       	ror	r27
 5aa:	f1 11       	cpse	r31, r1
 5ac:	f8 cf       	rjmp	.-16     	; 0x59e <__floatsisf+0x1c>
 5ae:	fa f4       	brpl	.+62     	; 0x5ee <__floatsisf+0x6c>
 5b0:	bb 0f       	add	r27, r27
 5b2:	11 f4       	brne	.+4      	; 0x5b8 <__floatsisf+0x36>
 5b4:	60 ff       	sbrs	r22, 0
 5b6:	1b c0       	rjmp	.+54     	; 0x5ee <__floatsisf+0x6c>
 5b8:	6f 5f       	subi	r22, 0xFF	; 255
 5ba:	7f 4f       	sbci	r23, 0xFF	; 255
 5bc:	8f 4f       	sbci	r24, 0xFF	; 255
 5be:	9f 4f       	sbci	r25, 0xFF	; 255
 5c0:	16 c0       	rjmp	.+44     	; 0x5ee <__floatsisf+0x6c>
 5c2:	88 23       	and	r24, r24
 5c4:	11 f0       	breq	.+4      	; 0x5ca <__floatsisf+0x48>
 5c6:	96 e9       	ldi	r25, 0x96	; 150
 5c8:	11 c0       	rjmp	.+34     	; 0x5ec <__floatsisf+0x6a>
 5ca:	77 23       	and	r23, r23
 5cc:	21 f0       	breq	.+8      	; 0x5d6 <__floatsisf+0x54>
 5ce:	9e e8       	ldi	r25, 0x8E	; 142
 5d0:	87 2f       	mov	r24, r23
 5d2:	76 2f       	mov	r23, r22
 5d4:	05 c0       	rjmp	.+10     	; 0x5e0 <__floatsisf+0x5e>
 5d6:	66 23       	and	r22, r22
 5d8:	71 f0       	breq	.+28     	; 0x5f6 <__floatsisf+0x74>
 5da:	96 e8       	ldi	r25, 0x86	; 134
 5dc:	86 2f       	mov	r24, r22
 5de:	70 e0       	ldi	r23, 0x00	; 0
 5e0:	60 e0       	ldi	r22, 0x00	; 0
 5e2:	2a f0       	brmi	.+10     	; 0x5ee <__floatsisf+0x6c>
 5e4:	9a 95       	dec	r25
 5e6:	66 0f       	add	r22, r22
 5e8:	77 1f       	adc	r23, r23
 5ea:	88 1f       	adc	r24, r24
 5ec:	da f7       	brpl	.-10     	; 0x5e4 <__floatsisf+0x62>
 5ee:	88 0f       	add	r24, r24
 5f0:	96 95       	lsr	r25
 5f2:	87 95       	ror	r24
 5f4:	97 f9       	bld	r25, 7
 5f6:	08 95       	ret

Disassembly of section .text:

0000066c <__fp_cmp>:
 66c:	99 0f       	add	r25, r25
 66e:	00 08       	sbc	r0, r0
 670:	55 0f       	add	r21, r21
 672:	aa 0b       	sbc	r26, r26
 674:	e0 e8       	ldi	r30, 0x80	; 128
 676:	fe ef       	ldi	r31, 0xFE	; 254
 678:	16 16       	cp	r1, r22
 67a:	17 06       	cpc	r1, r23
 67c:	e8 07       	cpc	r30, r24
 67e:	f9 07       	cpc	r31, r25
 680:	c0 f0       	brcs	.+48     	; 0x6b2 <__fp_cmp+0x46>
 682:	12 16       	cp	r1, r18
 684:	13 06       	cpc	r1, r19
 686:	e4 07       	cpc	r30, r20
 688:	f5 07       	cpc	r31, r21
 68a:	98 f0       	brcs	.+38     	; 0x6b2 <__fp_cmp+0x46>
 68c:	62 1b       	sub	r22, r18
 68e:	73 0b       	sbc	r23, r19
 690:	84 0b       	sbc	r24, r20
 692:	95 0b       	sbc	r25, r21
 694:	39 f4       	brne	.+14     	; 0x6a4 <__fp_cmp+0x38>
 696:	0a 26       	eor	r0, r26
 698:	61 f0       	breq	.+24     	; 0x6b2 <__fp_cmp+0x46>
 69a:	23 2b       	or	r18, r19
 69c:	24 2b       	or	r18, r20
 69e:	25 2b       	or	r18, r21
 6a0:	21 f4       	brne	.+8      	; 0x6aa <__fp_cmp+0x3e>
 6a2:	08 95       	ret
 6a4:	0a 26       	eor	r0, r26
 6a6:	09 f4       	brne	.+2      	; 0x6aa <__fp_cmp+0x3e>
 6a8:	a1 40       	sbci	r26, 0x01	; 1
 6aa:	a6 95       	lsr	r26
 6ac:	8f ef       	ldi	r24, 0xFF	; 255
 6ae:	81 1d       	adc	r24, r1
 6b0:	81 1d       	adc	r24, r1
 6b2:	08 95       	ret

Disassembly of section .text:

00000876 <__fp_inf>:
 876:	97 f9       	bld	r25, 7
 878:	9f 67       	ori	r25, 0x7F	; 127
 87a:	80 e8       	ldi	r24, 0x80	; 128
 87c:	70 e0       	ldi	r23, 0x00	; 0
 87e:	60 e0       	ldi	r22, 0x00	; 0
 880:	08 95       	ret

Disassembly of section .text:

000008a6 <__fp_nan>:
 8a6:	9f ef       	ldi	r25, 0xFF	; 255
 8a8:	80 ec       	ldi	r24, 0xC0	; 192
 8aa:	08 95       	ret

Disassembly of section .text:

0000084c <__fp_pscA>:
 84c:	00 24       	eor	r0, r0
 84e:	0a 94       	dec	r0
 850:	16 16       	cp	r1, r22
 852:	17 06       	cpc	r1, r23
 854:	18 06       	cpc	r1, r24
 856:	09 06       	cpc	r0, r25
 858:	08 95       	ret

Disassembly of section .text:

0000085a <__fp_pscB>:
 85a:	00 24       	eor	r0, r0
 85c:	0a 94       	dec	r0
 85e:	12 16       	cp	r1, r18
 860:	13 06       	cpc	r1, r19
 862:	14 06       	cpc	r1, r20
 864:	05 06       	cpc	r0, r21
 866:	08 95       	ret

Disassembly of section .text:

000007bc <__fp_round>:
 7bc:	09 2e       	mov	r0, r25
 7be:	03 94       	inc	r0
 7c0:	00 0c       	add	r0, r0
 7c2:	11 f4       	brne	.+4      	; 0x7c8 <__fp_round+0xc>
 7c4:	88 23       	and	r24, r24
 7c6:	52 f0       	brmi	.+20     	; 0x7dc <__fp_round+0x20>
 7c8:	bb 0f       	add	r27, r27
 7ca:	40 f4       	brcc	.+16     	; 0x7dc <__fp_round+0x20>
 7cc:	bf 2b       	or	r27, r31
 7ce:	11 f4       	brne	.+4      	; 0x7d4 <__fp_round+0x18>
 7d0:	60 ff       	sbrs	r22, 0
 7d2:	04 c0       	rjmp	.+8      	; 0x7dc <__fp_round+0x20>
 7d4:	6f 5f       	subi	r22, 0xFF	; 255
 7d6:	7f 4f       	sbci	r23, 0xFF	; 255
 7d8:	8f 4f       	sbci	r24, 0xFF	; 255
 7da:	9f 4f       	sbci	r25, 0xFF	; 255
 7dc:	08 95       	ret

Disassembly of section .text:

000006b4 <__fp_split3>:
 6b4:	57 fd       	sbrc	r21, 7
 6b6:	90 58       	subi	r25, 0x80	; 128
 6b8:	44 0f       	add	r20, r20
 6ba:	55 1f       	adc	r21, r21
 6bc:	59 f0       	breq	.+22     	; 0x6d4 <__fp_splitA+0x10>
 6be:	5f 3f       	cpi	r21, 0xFF	; 255
 6c0:	71 f0       	breq	.+28     	; 0x6de <__fp_splitA+0x1a>
 6c2:	47 95       	ror	r20

000006c4 <__fp_splitA>:
 6c4:	88 0f       	add	r24, r24
 6c6:	97 fb       	bst	r25, 7
 6c8:	99 1f       	adc	r25, r25
 6ca:	61 f0       	breq	.+24     	; 0x6e4 <__fp_splitA+0x20>
 6cc:	9f 3f       	cpi	r25, 0xFF	; 255
 6ce:	79 f0       	breq	.+30     	; 0x6ee <__fp_splitA+0x2a>
 6d0:	87 95       	ror	r24
 6d2:	08 95       	ret
 6d4:	12 16       	cp	r1, r18
 6d6:	13 06       	cpc	r1, r19
 6d8:	14 06       	cpc	r1, r20
 6da:	55 1f       	adc	r21, r21
 6dc:	f2 cf       	rjmp	.-28     	; 0x6c2 <__fp_split3+0xe>
 6de:	46 95       	lsr	r20
 6e0:	f1 df       	rcall	.-30     	; 0x6c4 <__fp_splitA>
 6e2:	08 c0       	rjmp	.+16     	; 0x6f4 <__fp_splitA+0x30>
 6e4:	16 16       	cp	r1, r22
 6e6:	17 06       	cpc	r1, r23
 6e8:	18 06       	cpc	r1, r24
 6ea:	99 1f       	adc	r25, r25
 6ec:	f1 cf       	rjmp	.-30     	; 0x6d0 <__fp_splitA+0xc>
 6ee:	86 95       	lsr	r24
 6f0:	71 05       	cpc	r23, r1
 6f2:	61 05       	cpc	r22, r1
 6f4:	08 94       	sec
 6f6:	08 95       	ret

Disassembly of section .text:

00000868 <__fp_zero>:
 868:	e8 94       	clt

0000086a <__fp_szero>:
 86a:	bb 27       	eor	r27, r27
 86c:	66 27       	eor	r22, r22
 86e:	77 27       	eor	r23, r23
 870:	cb 01       	movw	r24, r22
 872:	97 f9       	bld	r25, 7
 874:	08 95       	ret

Disassembly of section .text:

0000088c <__gesf2>:
 88c:	0e 94 36 03 	call	0x66c	; 0x66c <__fp_cmp>
 890:	08 f4       	brcc	.+2      	; 0x894 <__gesf2+0x8>
 892:	8f ef       	ldi	r24, 0xFF	; 255
 894:	08 95       	ret

Disassembly of section .text:

0000089e <__mulsf3>:
 89e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__mulsf3x>
 8a2:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__fp_round>

Disassembly of section .text:

000003dc <__mulsf3x>:
 3dc:	0f c0       	rjmp	.+30     	; 0x3fc <__mulsf3x+0x20>
 3de:	0e 94 26 04 	call	0x84c	; 0x84c <__fp_pscA>
 3e2:	38 f0       	brcs	.+14     	; 0x3f2 <__mulsf3x+0x16>
 3e4:	0e 94 2d 04 	call	0x85a	; 0x85a <__fp_pscB>
 3e8:	20 f0       	brcs	.+8      	; 0x3f2 <__mulsf3x+0x16>
 3ea:	95 23       	and	r25, r21
 3ec:	11 f0       	breq	.+4      	; 0x3f2 <__mulsf3x+0x16>
 3ee:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_inf>
 3f2:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__fp_nan>
 3f6:	11 24       	eor	r1, r1
 3f8:	0c 94 35 04 	jmp	0x86a	; 0x86a <__fp_szero>
 3fc:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__fp_split3>
 400:	70 f3       	brcs	.-36     	; 0x3de <__mulsf3x+0x2>

00000402 <__mulsf3_pse>:
 402:	95 9f       	mul	r25, r21
 404:	c1 f3       	breq	.-16     	; 0x3f6 <__mulsf3x+0x1a>
 406:	95 0f       	add	r25, r21
 408:	50 e0       	ldi	r21, 0x00	; 0
 40a:	55 1f       	adc	r21, r21
 40c:	62 9f       	mul	r22, r18
 40e:	f0 01       	movw	r30, r0
 410:	72 9f       	mul	r23, r18
 412:	bb 27       	eor	r27, r27
 414:	f0 0d       	add	r31, r0
 416:	b1 1d       	adc	r27, r1
 418:	63 9f       	mul	r22, r19
 41a:	aa 27       	eor	r26, r26
 41c:	f0 0d       	add	r31, r0
 41e:	b1 1d       	adc	r27, r1
 420:	aa 1f       	adc	r26, r26
 422:	64 9f       	mul	r22, r20
 424:	66 27       	eor	r22, r22
 426:	b0 0d       	add	r27, r0
 428:	a1 1d       	adc	r26, r1
 42a:	66 1f       	adc	r22, r22
 42c:	82 9f       	mul	r24, r18
 42e:	22 27       	eor	r18, r18
 430:	b0 0d       	add	r27, r0
 432:	a1 1d       	adc	r26, r1
 434:	62 1f       	adc	r22, r18
 436:	73 9f       	mul	r23, r19
 438:	b0 0d       	add	r27, r0
 43a:	a1 1d       	adc	r26, r1
 43c:	62 1f       	adc	r22, r18
 43e:	83 9f       	mul	r24, r19
 440:	a0 0d       	add	r26, r0
 442:	61 1d       	adc	r22, r1
 444:	22 1f       	adc	r18, r18
 446:	74 9f       	mul	r23, r20
 448:	33 27       	eor	r19, r19
 44a:	a0 0d       	add	r26, r0
 44c:	61 1d       	adc	r22, r1
 44e:	23 1f       	adc	r18, r19
 450:	84 9f       	mul	r24, r20
 452:	60 0d       	add	r22, r0
 454:	21 1d       	adc	r18, r1
 456:	82 2f       	mov	r24, r18
 458:	76 2f       	mov	r23, r22
 45a:	6a 2f       	mov	r22, r26
 45c:	11 24       	eor	r1, r1
 45e:	9f 57       	subi	r25, 0x7F	; 127
 460:	50 40       	sbci	r21, 0x00	; 0
 462:	9a f0       	brmi	.+38     	; 0x48a <__mulsf3_pse+0x88>
 464:	f1 f0       	breq	.+60     	; 0x4a2 <__mulsf3_pse+0xa0>
 466:	88 23       	and	r24, r24
 468:	4a f0       	brmi	.+18     	; 0x47c <__mulsf3_pse+0x7a>
 46a:	ee 0f       	add	r30, r30
 46c:	ff 1f       	adc	r31, r31
 46e:	bb 1f       	adc	r27, r27
 470:	66 1f       	adc	r22, r22
 472:	77 1f       	adc	r23, r23
 474:	88 1f       	adc	r24, r24
 476:	91 50       	subi	r25, 0x01	; 1
 478:	50 40       	sbci	r21, 0x00	; 0
 47a:	a9 f7       	brne	.-22     	; 0x466 <__mulsf3_pse+0x64>
 47c:	9e 3f       	cpi	r25, 0xFE	; 254
 47e:	51 05       	cpc	r21, r1
 480:	80 f0       	brcs	.+32     	; 0x4a2 <__mulsf3_pse+0xa0>
 482:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_inf>
 486:	0c 94 35 04 	jmp	0x86a	; 0x86a <__fp_szero>
 48a:	5f 3f       	cpi	r21, 0xFF	; 255
 48c:	e4 f3       	brlt	.-8      	; 0x486 <__mulsf3_pse+0x84>
 48e:	98 3e       	cpi	r25, 0xE8	; 232
 490:	d4 f3       	brlt	.-12     	; 0x486 <__mulsf3_pse+0x84>
 492:	86 95       	lsr	r24
 494:	77 95       	ror	r23
 496:	67 95       	ror	r22
 498:	b7 95       	ror	r27
 49a:	f7 95       	ror	r31
 49c:	e7 95       	ror	r30
 49e:	9f 5f       	subi	r25, 0xFF	; 255
 4a0:	c1 f7       	brne	.-16     	; 0x492 <__mulsf3_pse+0x90>
 4a2:	fe 2b       	or	r31, r30
 4a4:	88 0f       	add	r24, r24
 4a6:	91 1d       	adc	r25, r1
 4a8:	96 95       	lsr	r25
 4aa:	87 95       	ror	r24
 4ac:	97 f9       	bld	r25, 7
 4ae:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000008b4 <_fini>:
 8b4:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000008b6 <__funcs_on_exit>:
 8b6:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000008b8 <__simulator_exit>:
 8b8:	08 95       	ret

Disassembly of section .text.exit:

00000816 <exit>:
 816:	ec 01       	movw	r28, r24
 818:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__funcs_on_exit>
 81c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_fini>
 820:	ce 01       	movw	r24, r28
 822:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__simulator_exit>
 826:	ce 01       	movw	r24, r28
 828:	0e 94 58 04 	call	0x8b0	; 0x8b0 <_Exit>

Disassembly of section .text._Exit:

000008b0 <_Exit>:
 8b0:	0e 94 60 00 	call	0xc0	; 0xc0 <_exit>
